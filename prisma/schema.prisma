// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== Enums ==========
enum Role {
  CLIENT
  STAFF
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  SHIPPED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// ========== Models ==========

model User {
  id            String     @id @default(uuid())
  role          Role       @default(CLIENT)
  fullName      String
  email         String     @unique
  phone         String     @unique
  passwordHash  String
  profileImage  String? 
  address String
  city        String
  country   String
  postalCode  String   
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?  

  bookings      Booking[] @relation("UserBookings")
  staffBookings Booking[] @relation("StaffBookings")
  orders        Order[]
  payments      Payment[]
  reviews       Review[]
}

model Service {
  id              String     @id @default(uuid())
  title           String
  metaTitle     String?
  metaDescription String?
  description     String
  price           Decimal    @db.Decimal(10,2)
  durationMinutes Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?

  bookings        Booking[]
  reviews         Review[]
}

model Product {
  id            String     @id @default(uuid())
  name          String
  description   String
  metaTitle     String?
  metaDescription String?
  price         Decimal    @db.Decimal(10,2)
  stockQuantity Int        @default(0)
  sku           String     @unique
  imageUrl      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?

  orderItems    OrderItem[]
  reviews       Review[]
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  serviceId       String
  staffId         String
  appointmentDate DateTime
  timeSlot        String
  status          BookingStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  user            User          @relation("UserBookings", fields: [userId], references: [id])
  service         Service       @relation(fields: [serviceId], references: [id])
  staff           User          @relation("StaffBookings", fields: [staffId], references: [id])
  payment         Payment?

  @@unique([staffId, appointmentDate, timeSlot]) // prevent double booking
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  orderNumber String     @unique
  shippingAddress String
  city        String
  country   String
  postalCode  String
  totalAmount Decimal     @db.Decimal(10,2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10,2) // snapshot price at time of order

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Prevent duplicate items in same order
}

model Payment {
  id               String        @id @default(uuid())
  userId           String
  amount           Decimal       @db.Decimal(10,2)
  paymentMethod    String
  paymentReference String        @unique
  status           PaymentStatus @default(PENDING)
  bookingId        String?      @unique
  orderId          String?      @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user             User          @relation(fields: [userId], references: [id])
  booking          Booking?      @relation(fields: [bookingId], references: [id])
  order            Order?        @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  serviceId String?
  productId String?
  rating    Int     
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  user      User     @relation(fields: [userId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}

